//==========================================HTTP-запрос==================================
/*
GET
GET — самый распространённый метод. Данные обычно получают именно этим методом. Если метод не прописать явно, fetch будет отправлять запросы методом GET:
*/

// это GET-запрос к ресурсу "https://example.com"

fetch("https://example.com")
  .then((res) => {
    return res.json();
  })
  .then((data) => {
    console.log(data.user.name); // если мы попали в этот then, data — это объект
  })
  .catch((err) => {
    console.log("Ошибка. Запрос не выполнен: ", err);
  });

/*
POST
POST — второй по распространённости метод. Его используют для отправки данных на сервер. Чтобы послать запрос методом POST, нужно указать этот метод 
в объекте опций — вторым аргументом метода fetch:
*/

// POST-запрос к ресурсу "https://example.com"

fetch("https://example.com", {
  method: "POST",
  body: JSON.stringify({
    name: "Иван",
    age: 30,
  }),
});

/*
На самом деле данные можно отправлять не только в формате JSON — есть и другие форматы. Поэтому серверу нужно как-то понять, что за данные к нему пришли. 
За это отвечает так называемый MIME Type, или Media Type. Его прописывают в заголовке запроса Content-Type.
*/

//======================================================MIME Type============================================
/*
Чтобы сервер мог обработать данные, он должен понимать, чтó мы ему отправили. Для этого в вебе есть своя система указания типов — MIME Types. 
По этой системе типы указывают строкой, которая состоит из типа и подтипа документа, разделённых слешем:
*/

text/plain
text/html
text/javascript
text/css
image/jpeg
image/png
audio/mpeg
audio/ogg
video/mp4
application/json
application/octet-stream
application/x-www-form-urlencoded
multipart/form-data

/*
Для отправки данных формы обычно используют один из трёх типов:
application/json — для передачи данных в формате JSON;
application/x-www-form-urlencoded — формат, который кодирует поля формы так, чтобы их можно было отправить в URL;
multipart/form-data — для отправки файлов на сервер. Подойдёт, если среди прочего вы отправляете через форму картинку.
*/

//=======================================Тело и заголовки запроса========================================
/*
MIME-тип посылают в специальном заголовке Content-Type. 
Заголовки передаются в свойстве headers второго аргумента метода fetch. 
Чтобы послать в теле запроса данные в JSON, нужно передать в заголовках тип application/json.

Некоторые заголовки, например Content-Length (размер пересылаемых данных), браузер установит запросу самостоятельно.
Заголовки не чувствительны к регистру. Например, это одинаковые заголовки:

Content-Type: application/json
content-type: application/json 

Как передать данные на сервер

Мы говорили, что отправлять данные на сервер можно в теле запроса — свойстве body. 
Но это не единственный способ. Дело в том, что обработка нашего запроса — забота сервера. 
Поэтому только реализация сервера определяет, в каком виде данные должны поступать.
В параметрах запроса
Данные можно отправлять в параметрах запроса. Их перечисляют прямо в URL после вопросительного знака:
*/
fetch('https://example.com/images/random?type=portrait', {
  method: 'GET'
});

//Имя параметра и его значение указывают друг за другом через знак равенства: name=value. Такие пары имя атрибута=значение разделяют амперсандами &:

fetch('https://example.com/images/random?type=portrait&name=DorianGrey', {
  method: 'GET'
}); 
/*
Прямо в URL
Ещё один способ передать данные — указать их в URL. Например, если картинке присвоен идентификатор, можно запросить его в URL и получить картинку:
*/

fetch('https://example.com/images/ewfh23d832jnf2903', { // ewfh23d832jnf2903 — идентификатор картинки
  method: 'GET'
}); 
/*
Другие методы запросов
Раньше все запросы к серверу делали методами GET и POST. Но со временем появились новые методы. Они немного отличаются от старых и служат конкретным целям.
PUT предназначен для полного обновления указанного ресурса. Например, если в каталоге книг вы решили заменить одну книгу другой;
PATCH — для частичного обновления ресурса. Например, при обновлении профиля пользователя;
DELETE — для удаления ресурса с сервера.
Резюме
Основные HTTP-методы — это GET, POST, PUT, PATCH и DELETE.
Есть три основных способа передавать данные на сервер:
в теле запроса;
в параметрах запроса;
в URL.
Какой из этих способов выбрать, зависит от реализации сервера. Поэтому если не знаете — идите к бэкендеру, который программировал сервер для вашего сайта. А если отправляете запросы в API — читайте его документацию.
К примеру, вот документация API сервиса бесплатных фотографий: https://unsplash.com/documentation.
*/